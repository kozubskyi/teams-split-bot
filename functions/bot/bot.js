require('dotenv').config()
const { Telegraf, Markup } = require('telegraf')
// const TelegramBot = require('node-telegram-bot-api')
const { CREATOR_CHAT_ID } = require('./helpers/chat-ids')
const { onSplitVersionClick, onTeamsQuantityClick } = require('./on-buttons-click')
const { handleSkillSplit, handleRandomSplit } = require('./split-handlers')

const bot = new Telegraf(process.env.BOT_TOKEN)
// const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true })

function start() {
  // bot.setMyCommands([
  //   { command: '/start', description: 'ü§ô Start' },
  //   { command: '/test', description: 'Test' },
  // ])

  let splitVersion = ''
  let teamsQuantity = 0

  // Start command handler
  bot.start(async (ctx) => {
    try {
      await ctx.replyWithHTML(
        `
–Ø –±–æ—Ç, —â–æ –±—É–≤ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è –ø–æ–¥—ñ–ª—É –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏ —É –∫–æ–º–∞–Ω–¥–Ω–∏—Ö –≤–∏–¥–∞—Ö —Å–ø–æ—Ä—Ç—É. –í–∫–∞–∂—ñ—Ç—å —è–∫ –≤–∏ —Ö–æ—á–µ—Ç–µ, —â–æ–± –≤—ñ–¥–±—É–≤—Å—è —Ä–æ–∑–ø–æ–¥—ñ–ª:

<b>–ó–∞ —Å–∫—ñ–ª–æ–º</b> - –≥—Ä–∞–≤—Ü—ñ –±—É–¥—É—Ç—å –ø–æ–¥—ñ–ª–µ–Ω—ñ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏, –≤—Ä–∞—Ö–æ–≤—É—é—á–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è. –î–ª—è —Ü—å–æ–≥–æ –ø—ñ–∑–Ω—ñ—à–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤, —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π –≤—ñ–¥ –Ω–∞–π—Å–∏–ª—å–Ω—ñ—à–æ–≥–æ –¥–æ –Ω–∞–π—Å–ª–∞–±—à–æ–≥–æ –≥—Ä–∞–≤—Ü—è (–Ω–∞ –≤–∞—à—É —Å—É–±'—î–∫—Ç–∏–≤–Ω—É –¥—É–º–∫—É).

<b>–†–∞–Ω–¥–æ–º–Ω–æ</b> - –≥—Ä–∞–≤—Ü—ñ –±—É–¥—É—Ç—å –ø–æ–¥—ñ–ª–µ–Ω—ñ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º —á–∏–Ω–æ–º, –Ω–µ –∑–≤–∞–∂–∞—é—á–∏ –Ω–∞ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è.
  `,
        Markup.inlineKeyboard([
          [
            Markup.button.callback('üí™ –ó–∞ —Å–∫—ñ–ª–æ–º', 'skill_split'),
            Markup.button.callback('üé≤ –†–∞–Ω–¥–æ–º–Ω–æ', 'random_split'),
          ],
        ])
      )
    } catch (err) {
      console.error(err)
    }
  })

  // Split version buttons click handlers
  bot.action('skill_split', async (ctx) => {
    splitVersion = 'skill_split'
    await onSplitVersionClick(ctx)
  })
  bot.action('random_split', async (ctx) => {
    splitVersion = 'random_split'
    await onSplitVersionClick(ctx)
  })

  // Teams quantity buttons click handlers
  bot.action('2_teams', async (ctx) => {
    teamsQuantity = 2
    await onTeamsQuantityClick(ctx, splitVersion)
  })
  bot.action('3_teams', async (ctx) => {
    teamsQuantity = 3
    await onTeamsQuantityClick(ctx, splitVersion)
  })
  bot.action('4_teams', async (ctx) => {
    teamsQuantity = 4
    await onTeamsQuantityClick(ctx, splitVersion)
  })

  // Players list handler
  bot.on('text', async (ctx) => {
    const firstName = ctx.message.from.first_name
    const lastName = ctx.message.from.last_name
    const username = ctx.message.from.username
    const chatId = ctx.message.chat.id
    const text = ctx.message.text

    try {
      if (!teamsQuantity || !splitVersion) {
        return await ctx.reply('–î–ª—è –ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É /start')
      }

      const players = ctx.message.text.split('\n')
      let teamsData = {}
      for (let i = 1; i <= teamsQuantity; i++) teamsData[i] = []
      const teams = Object.keys(teamsData)

      if (splitVersion === 'skill_split') {
        teamsData = handleSkillSplit(players, teamsData)
      }

      if (splitVersion === 'random_split') {
        teamsData = handleRandomSplit(players, teamsData)
      }

      const reply = `
‚úîÔ∏è –ü–æ–¥—ñ–ª–∏–≤ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —á–∏–Ω–æ–º:
        ${teams
          .map((teamName) => {
            return `
<b>–ö–æ–º–∞–Ω–¥–∞ ${teamName}:</b>
${teamsData[teamName].join('\n')}
            `
          })
          .join('')}
        `

      await ctx.replyWithHTML(reply)

      splitVersion = ''
      teamsQuantity = 0

      chatId !== CREATOR_CHAT_ID &&
        (await ctx.telegram.sendMessage(
          CREATOR_CHAT_ID,
          `‚ÑπÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á "${firstName} ${lastName} <${username}> (${chatId})" —â–æ–π–Ω–æ –ø–æ–¥—ñ–ª–∏–≤ —Å–≤–æ—ó –∫–æ–º–∞–Ω–¥–∏: ${reply}`
        ))
    } catch (err) {
      chatId !== CREATOR_CHAT_ID && (await ctx.reply('–í–∏–Ω–∏–∫–ª–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –Ω–µ–ø–æ–ª–∞–¥–∫–∏, —Å–∫–æ—Ä–æ –ø–æ–ª–∞–≥–æ–¥–∂—É—Å—å —ñ –ø–æ–≤–µ—Ä–Ω—É—Å—å üë®‚Äçüîß'))

      await ctx.telegram.sendMessage(
        CREATOR_CHAT_ID,
        `‚ùå –ü–æ–º–∏–ª–∫–∞! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á "${firstName} ${lastName} <${username}> (${chatId})" –≤—ñ–¥–ø—Ä–∞–≤–∏–≤(-–ª–∞) –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "${text}" —ñ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ "${
          err?.response?.data?.message ?? err
        }"`
      )
    }
  })

  // Sticker handler
  bot.on('sticker', (ctx) => ctx.reply('üëç'))

  // for node-telegram-bot-api
  // bot.on('message', (msg) => bot.sendMessage(CREATOR_CHAT_ID, 'test'))
  // bot.on('polling_error', console.log)

  console.log('‚úÖ The bot is configured and must work correctly')
}

start()

// bot.launch()

// Enable graceful stop
// process.once('SIGINT', () => bot.stop('SIGINT'))
// process.once('SIGTERM', () => bot.stop('SIGTERM'))

// AWS event handler syntax (https://docs.aws.amazon.com/lambda/latest/dg/nodejs-handler.html)
exports.handler = async (event) => {
  try {
    await bot.handleUpdate(JSON.parse(event.body))
    return { statusCode: 200, body: '' }
  } catch (e) {
    console.error('error in handler:', e)
    return { statusCode: 400, body: 'This endpoint is meant for bot and telegram communication' }
  }
}
